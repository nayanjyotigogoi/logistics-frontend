/* tslint:disable */
/* eslint-disable */
/**
 * Logistic Backend API
 * A comprehensive logistic management system API built with NestJS
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@logistic-backend.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

export interface CreateCarrierDto {
    'carrier_name': string;
    'carrier_code': string;
    'type': CreateCarrierDtoTypeEnum;
}

export const CreateCarrierDtoTypeEnum = {
    Airline: 'airline',
    Shipping: 'shipping'
} as const;

export type CreateCarrierDtoTypeEnum = typeof CreateCarrierDtoTypeEnum[keyof typeof CreateCarrierDtoTypeEnum];

export interface CreateCityDto {
    'city_name': string;
    'city_code': string;
    'country_id': string;
}
export interface CreateCommodityDto {
    'commodity_name': string;
    'commodity_code': string;
    'category'?: string;
}
export interface CreateCostCenterDto {
    'cost_center_code': string;
    'job_id': string;
    'estimated_income': number;
    'actual_income': number;
    'estimated_expense': number;
    'actual_expense': number;
    'status'?: CreateCostCenterDtoStatusEnum;
}

export const CreateCostCenterDtoStatusEnum = {
    Provisional: 'provisional',
    Final: 'final'
} as const;

export type CreateCostCenterDtoStatusEnum = typeof CreateCostCenterDtoStatusEnum[keyof typeof CreateCostCenterDtoStatusEnum];

export interface CreateCountryDto {
    'country_name': string;
    'country_code': string;
    'capital'?: string;
    'currency'?: string;
    'language'?: string;
}
export interface CreateFinancialTransactionDto {
    'cost_center_id': number;
    'transaction_type': CreateFinancialTransactionDtoTransactionTypeEnum;
    'description': string;
    'amount': number;
    'currency': string;
    'transaction_date': string;
    'reference_type'?: CreateFinancialTransactionDtoReferenceTypeEnum;
    'reference_id'?: number;
    'is_provisional'?: boolean;
    'is_active'?: boolean;
}

export const CreateFinancialTransactionDtoTransactionTypeEnum = {
    Income: 'income',
    Expense: 'expense'
} as const;

export type CreateFinancialTransactionDtoTransactionTypeEnum = typeof CreateFinancialTransactionDtoTransactionTypeEnum[keyof typeof CreateFinancialTransactionDtoTransactionTypeEnum];
export const CreateFinancialTransactionDtoReferenceTypeEnum = {
    Invoice: 'invoice',
    Bill: 'bill'
} as const;

export type CreateFinancialTransactionDtoReferenceTypeEnum = typeof CreateFinancialTransactionDtoReferenceTypeEnum[keyof typeof CreateFinancialTransactionDtoReferenceTypeEnum];

export interface CreateHouseAwbDto {
    /**
     * Job ID
     */
    'job_id': string;
    /**
     * House AWB number
     */
    'house_number': string;
    /**
     * Shipper ID
     */
    'shipper_id': string;
    /**
     * Consignee ID
     */
    'consignee_id': string;
    /**
     * Issue date
     */
    'issue_date': string;
    /**
     * AWB status
     */
    'status'?: CreateHouseAwbDtoStatusEnum;
    /**
     * Master AWB ID
     */
    'master_id'?: number;
    /**
     * Items
     */
    'items': Array<CreateItemDto>;
}

export const CreateHouseAwbDtoStatusEnum = {
    Draft: 'draft',
    Issued: 'issued',
    Cancelled: 'cancelled'
} as const;

export type CreateHouseAwbDtoStatusEnum = typeof CreateHouseAwbDtoStatusEnum[keyof typeof CreateHouseAwbDtoStatusEnum];

export interface CreateItemDto {
    'commodity_id': string;
    'house_awb_id': string;
    'master_awb_id'?: string;
    'description': string;
    'quantity': number;
    'unit': string;
    'volume'?: number;
    'weight'?: number;
    'package_count'?: number;
    'package_type'?: string;
    'value'?: number;
    'currency'?: string;
}
export interface CreateJobDto {
    'job_number': string;
    'job_type': CreateJobDtoJobTypeEnum;
    'shipper_id': string;
    'consignee_id': string;
    'notify_party_id'?: string;
    'carrier_id': string;
    'origin_port_id': string;
    'destination_port_id': string;
    'loading_port_id'?: string;
    'discharge_port_id'?: string;
    'sales_person_id'?: string;
    'job_date': string;
    'status'?: CreateJobDtoStatusEnum;
    'gross_weight'?: number;
    'chargeable_weight'?: number;
    'package_count'?: number;
    'eta'?: string;
    'etd'?: string;
}

export const CreateJobDtoJobTypeEnum = {
    Export: 'export',
    Import: 'import'
} as const;

export type CreateJobDtoJobTypeEnum = typeof CreateJobDtoJobTypeEnum[keyof typeof CreateJobDtoJobTypeEnum];
export const CreateJobDtoStatusEnum = {
    Open: 'open',
    Invoiced: 'invoiced',
    Closed: 'closed'
} as const;

export type CreateJobDtoStatusEnum = typeof CreateJobDtoStatusEnum[keyof typeof CreateJobDtoStatusEnum];

export interface CreateMasterAwbDto {
    'master_number': string;
    'job_id': string;
    'carrier_id': string;
    'issue_date': string;
    'status'?: CreateMasterAwbDtoStatusEnum;
}

export const CreateMasterAwbDtoStatusEnum = {
    Draft: 'draft',
    Issued: 'issued',
    Cancelled: 'cancelled'
} as const;

export type CreateMasterAwbDtoStatusEnum = typeof CreateMasterAwbDtoStatusEnum[keyof typeof CreateMasterAwbDtoStatusEnum];

export interface CreatePartyDto {
    'name': string;
    'short_name'?: string;
    'type': CreatePartyDtoTypeEnum;
    'billing_address'?: string;
    'corporate_address'?: string;
    'credit_limit'?: string;
    'credit_days'?: number;
    'tds_rate'?: string;
    'tds_applicable'?: boolean;
    'contact_person'?: string;
    'phone'?: string;
    'email'?: string;
}

export const CreatePartyDtoTypeEnum = {
    Consignee: 'consignee',
    Shipper: 'shipper',
    Carrier: 'carrier',
    Vendor: 'vendor'
} as const;

export type CreatePartyDtoTypeEnum = typeof CreatePartyDtoTypeEnum[keyof typeof CreatePartyDtoTypeEnum];

export interface CreatePortAirportDto {
    'port_name': string;
    'port_code': string;
    'type': CreatePortAirportDtoTypeEnum;
    'city_id': string;
}

export const CreatePortAirportDtoTypeEnum = {
    Port: 'port',
    Airport: 'airport'
} as const;

export type CreatePortAirportDtoTypeEnum = typeof CreatePortAirportDtoTypeEnum[keyof typeof CreatePortAirportDtoTypeEnum];

export interface LoginDto {
    /**
     * User email address
     */
    'email': string;
    /**
     * User password
     */
    'password': string;
}
export interface RegisterDto {
    /**
     * User email address
     */
    'email': string;
    /**
     * User password
     */
    'password': string;
    /**
     * User first name
     */
    'firstName': string;
    /**
     * User last name
     */
    'lastName': string;
    /**
     * User phone number
     */
    'phone'?: string;
}
export interface UpdateItemDto {
    'commodity_id'?: string;
    'house_awb_id'?: string;
    'master_awb_id'?: string;
    'description'?: string;
    'quantity'?: number;
    'unit'?: string;
    'volume'?: number;
    'weight'?: number;
    'package_count'?: number;
    'package_type'?: string;
    'value'?: number;
    'currency'?: string;
}

/**
 * AuthenticationApi - axios parameter creator
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get current authenticated user profile
         * @summary Get user profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGetProfile: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT-auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * üîê Authenticate user with email and password. After successful login, the JWT token will be automatically captured and used for all protected endpoints. No manual token setup required!
         * @summary User login
         * @param {LoginDto} loginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin: async (loginDto: LoginDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginDto' is not null or undefined
            assertParamExists('authControllerLogin', 'loginDto', loginDto)
            const localVarPath = `/api/v1/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate a new access token using the current valid token
         * @summary Refresh access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRefreshToken: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/auth/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT-auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Register a new user account
         * @summary User registration
         * @param {RegisterDto} registerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRegister: async (registerDto: RegisterDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerDto' is not null or undefined
            assertParamExists('authControllerRegister', 'registerDto', registerDto)
            const localVarPath = `/api/v1/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * Get current authenticated user profile
         * @summary Get user profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerGetProfile(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerGetProfile(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.authControllerGetProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * üîê Authenticate user with email and password. After successful login, the JWT token will be automatically captured and used for all protected endpoints. No manual token setup required!
         * @summary User login
         * @param {LoginDto} loginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerLogin(loginDto: LoginDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerLogin(loginDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.authControllerLogin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Generate a new access token using the current valid token
         * @summary Refresh access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerRefreshToken(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerRefreshToken(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.authControllerRefreshToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Register a new user account
         * @summary User registration
         * @param {RegisterDto} registerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerRegister(registerDto: RegisterDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerRegister(registerDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.authControllerRegister']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * Get current authenticated user profile
         * @summary Get user profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerGetProfile(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authControllerGetProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * üîê Authenticate user with email and password. After successful login, the JWT token will be automatically captured and used for all protected endpoints. No manual token setup required!
         * @summary User login
         * @param {LoginDto} loginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin(loginDto: LoginDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authControllerLogin(loginDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate a new access token using the current valid token
         * @summary Refresh access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRefreshToken(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authControllerRefreshToken(options).then((request) => request(axios, basePath));
        },
        /**
         * Register a new user account
         * @summary User registration
         * @param {RegisterDto} registerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRegister(registerDto: RegisterDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authControllerRegister(registerDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationApi - object-oriented interface
 */
export class AuthenticationApi extends BaseAPI {
    /**
     * Get current authenticated user profile
     * @summary Get user profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public authControllerGetProfile(options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).authControllerGetProfile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * üîê Authenticate user with email and password. After successful login, the JWT token will be automatically captured and used for all protected endpoints. No manual token setup required!
     * @summary User login
     * @param {LoginDto} loginDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public authControllerLogin(loginDto: LoginDto, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).authControllerLogin(loginDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generate a new access token using the current valid token
     * @summary Refresh access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public authControllerRefreshToken(options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).authControllerRefreshToken(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Register a new user account
     * @summary User registration
     * @param {RegisterDto} registerDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public authControllerRegister(registerDto: RegisterDto, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).authControllerRegister(registerDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CarriersApi - axios parameter creator
 */
export const CarriersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create carrier
         * @param {CreateCarrierDto} createCarrierDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCarrier: async (createCarrierDto: CreateCarrierDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCarrierDto' is not null or undefined
            assertParamExists('createCarrier', 'createCarrierDto', createCarrierDto)
            const localVarPath = `/api/v1/master/carriers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCarrierDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete carrier
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCarrier: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteCarrier', 'id', id)
            const localVarPath = `/api/v1/master/carriers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get carrier by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCarrierById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCarrierById', 'id', id)
            const localVarPath = `/api/v1/master/carriers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List carriers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCarriers: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/master/carriers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search carriers
         * @param {SearchCarriersSortDirEnum} [sortDir] 
         * @param {string} [sortBy] 
         * @param {number} [pageSize] 
         * @param {number} [page] 
         * @param {string} [type] 
         * @param {string} [carrierCode] 
         * @param {string} [carrierName] 
         * @param {number} [carrierId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCarriers: async (sortDir?: SearchCarriersSortDirEnum, sortBy?: string, pageSize?: number, page?: number, type?: string, carrierCode?: string, carrierName?: string, carrierId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/master/carriers/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sortDir !== undefined) {
                localVarQueryParameter['sort_dir'] = sortDir;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (carrierCode !== undefined) {
                localVarQueryParameter['carrier_code'] = carrierCode;
            }

            if (carrierName !== undefined) {
                localVarQueryParameter['carrier_name'] = carrierName;
            }

            if (carrierId !== undefined) {
                localVarQueryParameter['carrier_id'] = carrierId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update carrier
         * @param {string} id 
         * @param {CreateCarrierDto} createCarrierDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCarrier: async (id: string, createCarrierDto: CreateCarrierDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateCarrier', 'id', id)
            // verify required parameter 'createCarrierDto' is not null or undefined
            assertParamExists('updateCarrier', 'createCarrierDto', createCarrierDto)
            const localVarPath = `/api/v1/master/carriers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCarrierDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CarriersApi - functional programming interface
 */
export const CarriersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CarriersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create carrier
         * @param {CreateCarrierDto} createCarrierDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCarrier(createCarrierDto: CreateCarrierDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCarrier(createCarrierDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CarriersApi.createCarrier']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete carrier
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCarrier(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCarrier(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CarriersApi.deleteCarrier']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get carrier by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCarrierById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCarrierById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CarriersApi.getCarrierById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List carriers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCarriers(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCarriers(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CarriersApi.listCarriers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Search carriers
         * @param {SearchCarriersSortDirEnum} [sortDir] 
         * @param {string} [sortBy] 
         * @param {number} [pageSize] 
         * @param {number} [page] 
         * @param {string} [type] 
         * @param {string} [carrierCode] 
         * @param {string} [carrierName] 
         * @param {number} [carrierId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchCarriers(sortDir?: SearchCarriersSortDirEnum, sortBy?: string, pageSize?: number, page?: number, type?: string, carrierCode?: string, carrierName?: string, carrierId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchCarriers(sortDir, sortBy, pageSize, page, type, carrierCode, carrierName, carrierId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CarriersApi.searchCarriers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update carrier
         * @param {string} id 
         * @param {CreateCarrierDto} createCarrierDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCarrier(id: string, createCarrierDto: CreateCarrierDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCarrier(id, createCarrierDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CarriersApi.updateCarrier']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CarriersApi - factory interface
 */
export const CarriersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CarriersApiFp(configuration)
    return {
        /**
         * 
         * @summary Create carrier
         * @param {CreateCarrierDto} createCarrierDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCarrier(createCarrierDto: CreateCarrierDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createCarrier(createCarrierDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete carrier
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCarrier(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteCarrier(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get carrier by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCarrierById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getCarrierById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List carriers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCarriers(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.listCarriers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search carriers
         * @param {SearchCarriersSortDirEnum} [sortDir] 
         * @param {string} [sortBy] 
         * @param {number} [pageSize] 
         * @param {number} [page] 
         * @param {string} [type] 
         * @param {string} [carrierCode] 
         * @param {string} [carrierName] 
         * @param {number} [carrierId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCarriers(sortDir?: SearchCarriersSortDirEnum, sortBy?: string, pageSize?: number, page?: number, type?: string, carrierCode?: string, carrierName?: string, carrierId?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.searchCarriers(sortDir, sortBy, pageSize, page, type, carrierCode, carrierName, carrierId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update carrier
         * @param {string} id 
         * @param {CreateCarrierDto} createCarrierDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCarrier(id: string, createCarrierDto: CreateCarrierDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateCarrier(id, createCarrierDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CarriersApi - object-oriented interface
 */
export class CarriersApi extends BaseAPI {
    /**
     * 
     * @summary Create carrier
     * @param {CreateCarrierDto} createCarrierDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public createCarrier(createCarrierDto: CreateCarrierDto, options?: RawAxiosRequestConfig) {
        return CarriersApiFp(this.configuration).createCarrier(createCarrierDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete carrier
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public deleteCarrier(id: string, options?: RawAxiosRequestConfig) {
        return CarriersApiFp(this.configuration).deleteCarrier(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get carrier by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public getCarrierById(id: string, options?: RawAxiosRequestConfig) {
        return CarriersApiFp(this.configuration).getCarrierById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List carriers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listCarriers(options?: RawAxiosRequestConfig) {
        return CarriersApiFp(this.configuration).listCarriers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search carriers
     * @param {SearchCarriersSortDirEnum} [sortDir] 
     * @param {string} [sortBy] 
     * @param {number} [pageSize] 
     * @param {number} [page] 
     * @param {string} [type] 
     * @param {string} [carrierCode] 
     * @param {string} [carrierName] 
     * @param {number} [carrierId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public searchCarriers(sortDir?: SearchCarriersSortDirEnum, sortBy?: string, pageSize?: number, page?: number, type?: string, carrierCode?: string, carrierName?: string, carrierId?: number, options?: RawAxiosRequestConfig) {
        return CarriersApiFp(this.configuration).searchCarriers(sortDir, sortBy, pageSize, page, type, carrierCode, carrierName, carrierId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update carrier
     * @param {string} id 
     * @param {CreateCarrierDto} createCarrierDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public updateCarrier(id: string, createCarrierDto: CreateCarrierDto, options?: RawAxiosRequestConfig) {
        return CarriersApiFp(this.configuration).updateCarrier(id, createCarrierDto, options).then((request) => request(this.axios, this.basePath));
    }
}

export const SearchCarriersSortDirEnum = {
    Asc: 'ASC',
    Desc: 'DESC'
} as const;
export type SearchCarriersSortDirEnum = typeof SearchCarriersSortDirEnum[keyof typeof SearchCarriersSortDirEnum];


/**
 * CitiesApi - axios parameter creator
 */
export const CitiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create city
         * @param {CreateCityDto} createCityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCity: async (createCityDto: CreateCityDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCityDto' is not null or undefined
            assertParamExists('createCity', 'createCityDto', createCityDto)
            const localVarPath = `/api/v1/master/cities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCityDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete city
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCity: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteCity', 'id', id)
            const localVarPath = `/api/v1/master/cities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get city by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCityById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCityById', 'id', id)
            const localVarPath = `/api/v1/master/cities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List cities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCities: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/master/cities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search cities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCities: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/master/cities/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update city
         * @param {string} id 
         * @param {CreateCityDto} createCityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCity: async (id: string, createCityDto: CreateCityDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateCity', 'id', id)
            // verify required parameter 'createCityDto' is not null or undefined
            assertParamExists('updateCity', 'createCityDto', createCityDto)
            const localVarPath = `/api/v1/master/cities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCityDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CitiesApi - functional programming interface
 */
export const CitiesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CitiesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create city
         * @param {CreateCityDto} createCityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCity(createCityDto: CreateCityDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCity(createCityDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CitiesApi.createCity']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete city
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCity(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCity(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CitiesApi.deleteCity']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get city by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCityById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCityById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CitiesApi.getCityById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List cities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCities(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCities(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CitiesApi.listCities']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Search cities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchCities(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchCities(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CitiesApi.searchCities']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update city
         * @param {string} id 
         * @param {CreateCityDto} createCityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCity(id: string, createCityDto: CreateCityDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCity(id, createCityDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CitiesApi.updateCity']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CitiesApi - factory interface
 */
export const CitiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CitiesApiFp(configuration)
    return {
        /**
         * 
         * @summary Create city
         * @param {CreateCityDto} createCityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCity(createCityDto: CreateCityDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createCity(createCityDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete city
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCity(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteCity(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get city by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCityById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getCityById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List cities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCities(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.listCities(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search cities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCities(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.searchCities(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update city
         * @param {string} id 
         * @param {CreateCityDto} createCityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCity(id: string, createCityDto: CreateCityDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateCity(id, createCityDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CitiesApi - object-oriented interface
 */
export class CitiesApi extends BaseAPI {
    /**
     * 
     * @summary Create city
     * @param {CreateCityDto} createCityDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public createCity(createCityDto: CreateCityDto, options?: RawAxiosRequestConfig) {
        return CitiesApiFp(this.configuration).createCity(createCityDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete city
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public deleteCity(id: string, options?: RawAxiosRequestConfig) {
        return CitiesApiFp(this.configuration).deleteCity(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get city by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public getCityById(id: string, options?: RawAxiosRequestConfig) {
        return CitiesApiFp(this.configuration).getCityById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List cities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listCities(options?: RawAxiosRequestConfig) {
        return CitiesApiFp(this.configuration).listCities(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search cities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public searchCities(options?: RawAxiosRequestConfig) {
        return CitiesApiFp(this.configuration).searchCities(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update city
     * @param {string} id 
     * @param {CreateCityDto} createCityDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public updateCity(id: string, createCityDto: CreateCityDto, options?: RawAxiosRequestConfig) {
        return CitiesApiFp(this.configuration).updateCity(id, createCityDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CommoditiesApi - axios parameter creator
 */
export const CommoditiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create commodity
         * @param {CreateCommodityDto} createCommodityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCommodity: async (createCommodityDto: CreateCommodityDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCommodityDto' is not null or undefined
            assertParamExists('createCommodity', 'createCommodityDto', createCommodityDto)
            const localVarPath = `/api/v1/master/commodities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCommodityDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete commodity
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCommodity: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteCommodity', 'id', id)
            const localVarPath = `/api/v1/master/commodities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get commodity by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommodityById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCommodityById', 'id', id)
            const localVarPath = `/api/v1/master/commodities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List commodities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCommodities: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/master/commodities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search commodities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCommodities: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/master/commodities/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update commodity
         * @param {string} id 
         * @param {CreateCommodityDto} createCommodityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCommodity: async (id: string, createCommodityDto: CreateCommodityDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateCommodity', 'id', id)
            // verify required parameter 'createCommodityDto' is not null or undefined
            assertParamExists('updateCommodity', 'createCommodityDto', createCommodityDto)
            const localVarPath = `/api/v1/master/commodities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCommodityDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CommoditiesApi - functional programming interface
 */
export const CommoditiesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CommoditiesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create commodity
         * @param {CreateCommodityDto} createCommodityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCommodity(createCommodityDto: CreateCommodityDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCommodity(createCommodityDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommoditiesApi.createCommodity']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete commodity
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCommodity(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCommodity(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommoditiesApi.deleteCommodity']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get commodity by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCommodityById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCommodityById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommoditiesApi.getCommodityById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List commodities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCommodities(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCommodities(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommoditiesApi.listCommodities']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Search commodities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchCommodities(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchCommodities(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommoditiesApi.searchCommodities']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update commodity
         * @param {string} id 
         * @param {CreateCommodityDto} createCommodityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCommodity(id: string, createCommodityDto: CreateCommodityDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCommodity(id, createCommodityDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommoditiesApi.updateCommodity']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CommoditiesApi - factory interface
 */
export const CommoditiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CommoditiesApiFp(configuration)
    return {
        /**
         * 
         * @summary Create commodity
         * @param {CreateCommodityDto} createCommodityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCommodity(createCommodityDto: CreateCommodityDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createCommodity(createCommodityDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete commodity
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCommodity(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteCommodity(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get commodity by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommodityById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getCommodityById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List commodities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCommodities(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.listCommodities(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search commodities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCommodities(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.searchCommodities(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update commodity
         * @param {string} id 
         * @param {CreateCommodityDto} createCommodityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCommodity(id: string, createCommodityDto: CreateCommodityDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateCommodity(id, createCommodityDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CommoditiesApi - object-oriented interface
 */
export class CommoditiesApi extends BaseAPI {
    /**
     * 
     * @summary Create commodity
     * @param {CreateCommodityDto} createCommodityDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public createCommodity(createCommodityDto: CreateCommodityDto, options?: RawAxiosRequestConfig) {
        return CommoditiesApiFp(this.configuration).createCommodity(createCommodityDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete commodity
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public deleteCommodity(id: string, options?: RawAxiosRequestConfig) {
        return CommoditiesApiFp(this.configuration).deleteCommodity(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get commodity by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public getCommodityById(id: string, options?: RawAxiosRequestConfig) {
        return CommoditiesApiFp(this.configuration).getCommodityById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List commodities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listCommodities(options?: RawAxiosRequestConfig) {
        return CommoditiesApiFp(this.configuration).listCommodities(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search commodities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public searchCommodities(options?: RawAxiosRequestConfig) {
        return CommoditiesApiFp(this.configuration).searchCommodities(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update commodity
     * @param {string} id 
     * @param {CreateCommodityDto} createCommodityDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public updateCommodity(id: string, createCommodityDto: CreateCommodityDto, options?: RawAxiosRequestConfig) {
        return CommoditiesApiFp(this.configuration).updateCommodity(id, createCommodityDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CostCentersApi - axios parameter creator
 */
export const CostCentersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create cost center
         * @param {CreateCostCenterDto} createCostCenterDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCostCenter: async (createCostCenterDto: CreateCostCenterDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCostCenterDto' is not null or undefined
            assertParamExists('createCostCenter', 'createCostCenterDto', createCostCenterDto)
            const localVarPath = `/api/v1/master/cost-centers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCostCenterDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get cost center by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCostCenterById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCostCenterById', 'id', id)
            const localVarPath = `/api/v1/master/cost-centers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List cost centers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCostCenters: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/master/cost-centers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search cost centers
         * @param {number} [costCenterId] 
         * @param {string} [jobId] 
         * @param {string} [costCenterCode] 
         * @param {SearchCostCentersStatusEnum} [status] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [sortBy] 
         * @param {string} [sortDir] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCostCenters: async (costCenterId?: number, jobId?: string, costCenterCode?: string, status?: SearchCostCentersStatusEnum, page?: number, pageSize?: number, sortBy?: string, sortDir?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/master/cost-centers/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (costCenterId !== undefined) {
                localVarQueryParameter['cost_center_id'] = costCenterId;
            }

            if (jobId !== undefined) {
                localVarQueryParameter['job_id'] = jobId;
            }

            if (costCenterCode !== undefined) {
                localVarQueryParameter['cost_center_code'] = costCenterCode;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (sortDir !== undefined) {
                localVarQueryParameter['sort_dir'] = sortDir;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CostCentersApi - functional programming interface
 */
export const CostCentersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CostCentersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create cost center
         * @param {CreateCostCenterDto} createCostCenterDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCostCenter(createCostCenterDto: CreateCostCenterDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCostCenter(createCostCenterDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CostCentersApi.createCostCenter']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get cost center by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCostCenterById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCostCenterById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CostCentersApi.getCostCenterById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List cost centers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCostCenters(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCostCenters(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CostCentersApi.listCostCenters']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Search cost centers
         * @param {number} [costCenterId] 
         * @param {string} [jobId] 
         * @param {string} [costCenterCode] 
         * @param {SearchCostCentersStatusEnum} [status] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [sortBy] 
         * @param {string} [sortDir] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchCostCenters(costCenterId?: number, jobId?: string, costCenterCode?: string, status?: SearchCostCentersStatusEnum, page?: number, pageSize?: number, sortBy?: string, sortDir?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchCostCenters(costCenterId, jobId, costCenterCode, status, page, pageSize, sortBy, sortDir, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CostCentersApi.searchCostCenters']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CostCentersApi - factory interface
 */
export const CostCentersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CostCentersApiFp(configuration)
    return {
        /**
         * 
         * @summary Create cost center
         * @param {CreateCostCenterDto} createCostCenterDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCostCenter(createCostCenterDto: CreateCostCenterDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createCostCenter(createCostCenterDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get cost center by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCostCenterById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getCostCenterById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List cost centers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCostCenters(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.listCostCenters(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search cost centers
         * @param {number} [costCenterId] 
         * @param {string} [jobId] 
         * @param {string} [costCenterCode] 
         * @param {SearchCostCentersStatusEnum} [status] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [sortBy] 
         * @param {string} [sortDir] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCostCenters(costCenterId?: number, jobId?: string, costCenterCode?: string, status?: SearchCostCentersStatusEnum, page?: number, pageSize?: number, sortBy?: string, sortDir?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.searchCostCenters(costCenterId, jobId, costCenterCode, status, page, pageSize, sortBy, sortDir, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CostCentersApi - object-oriented interface
 */
export class CostCentersApi extends BaseAPI {
    /**
     * 
     * @summary Create cost center
     * @param {CreateCostCenterDto} createCostCenterDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public createCostCenter(createCostCenterDto: CreateCostCenterDto, options?: RawAxiosRequestConfig) {
        return CostCentersApiFp(this.configuration).createCostCenter(createCostCenterDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get cost center by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public getCostCenterById(id: string, options?: RawAxiosRequestConfig) {
        return CostCentersApiFp(this.configuration).getCostCenterById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List cost centers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listCostCenters(options?: RawAxiosRequestConfig) {
        return CostCentersApiFp(this.configuration).listCostCenters(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search cost centers
     * @param {number} [costCenterId] 
     * @param {string} [jobId] 
     * @param {string} [costCenterCode] 
     * @param {SearchCostCentersStatusEnum} [status] 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {string} [sortBy] 
     * @param {string} [sortDir] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public searchCostCenters(costCenterId?: number, jobId?: string, costCenterCode?: string, status?: SearchCostCentersStatusEnum, page?: number, pageSize?: number, sortBy?: string, sortDir?: string, options?: RawAxiosRequestConfig) {
        return CostCentersApiFp(this.configuration).searchCostCenters(costCenterId, jobId, costCenterCode, status, page, pageSize, sortBy, sortDir, options).then((request) => request(this.axios, this.basePath));
    }
}

export const SearchCostCentersStatusEnum = {
    Provisional: 'provisional',
    Final: 'final'
} as const;
export type SearchCostCentersStatusEnum = typeof SearchCostCentersStatusEnum[keyof typeof SearchCostCentersStatusEnum];


/**
 * CountriesApi - axios parameter creator
 */
export const CountriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create country
         * @param {CreateCountryDto} createCountryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCountry: async (createCountryDto: CreateCountryDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCountryDto' is not null or undefined
            assertParamExists('createCountry', 'createCountryDto', createCountryDto)
            const localVarPath = `/api/v1/master/countries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCountryDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete country
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCountry: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteCountry', 'id', id)
            const localVarPath = `/api/v1/master/countries/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get country by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCountryById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCountryById', 'id', id)
            const localVarPath = `/api/v1/master/countries/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List countries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCountries: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/master/countries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search countries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCountries: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/master/countries/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update country
         * @param {string} id 
         * @param {CreateCountryDto} createCountryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCountry: async (id: string, createCountryDto: CreateCountryDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateCountry', 'id', id)
            // verify required parameter 'createCountryDto' is not null or undefined
            assertParamExists('updateCountry', 'createCountryDto', createCountryDto)
            const localVarPath = `/api/v1/master/countries/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCountryDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CountriesApi - functional programming interface
 */
export const CountriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CountriesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create country
         * @param {CreateCountryDto} createCountryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCountry(createCountryDto: CreateCountryDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCountry(createCountryDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CountriesApi.createCountry']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete country
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCountry(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCountry(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CountriesApi.deleteCountry']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get country by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCountryById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCountryById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CountriesApi.getCountryById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List countries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCountries(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCountries(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CountriesApi.listCountries']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Search countries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchCountries(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchCountries(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CountriesApi.searchCountries']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update country
         * @param {string} id 
         * @param {CreateCountryDto} createCountryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCountry(id: string, createCountryDto: CreateCountryDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCountry(id, createCountryDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CountriesApi.updateCountry']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CountriesApi - factory interface
 */
export const CountriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CountriesApiFp(configuration)
    return {
        /**
         * 
         * @summary Create country
         * @param {CreateCountryDto} createCountryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCountry(createCountryDto: CreateCountryDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createCountry(createCountryDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete country
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCountry(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteCountry(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get country by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCountryById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getCountryById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List countries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCountries(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.listCountries(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search countries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCountries(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.searchCountries(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update country
         * @param {string} id 
         * @param {CreateCountryDto} createCountryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCountry(id: string, createCountryDto: CreateCountryDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateCountry(id, createCountryDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CountriesApi - object-oriented interface
 */
export class CountriesApi extends BaseAPI {
    /**
     * 
     * @summary Create country
     * @param {CreateCountryDto} createCountryDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public createCountry(createCountryDto: CreateCountryDto, options?: RawAxiosRequestConfig) {
        return CountriesApiFp(this.configuration).createCountry(createCountryDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete country
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public deleteCountry(id: string, options?: RawAxiosRequestConfig) {
        return CountriesApiFp(this.configuration).deleteCountry(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get country by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public getCountryById(id: string, options?: RawAxiosRequestConfig) {
        return CountriesApiFp(this.configuration).getCountryById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List countries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listCountries(options?: RawAxiosRequestConfig) {
        return CountriesApiFp(this.configuration).listCountries(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search countries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public searchCountries(options?: RawAxiosRequestConfig) {
        return CountriesApiFp(this.configuration).searchCountries(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update country
     * @param {string} id 
     * @param {CreateCountryDto} createCountryDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public updateCountry(id: string, createCountryDto: CreateCountryDto, options?: RawAxiosRequestConfig) {
        return CountriesApiFp(this.configuration).updateCountry(id, createCountryDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DefaultApi - axios parameter creator
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthControllerCheck: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthControllerCheck(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthControllerCheck(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.healthControllerCheck']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthControllerCheck(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.healthControllerCheck(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public healthControllerCheck(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).healthControllerCheck(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FinancialTransactionsApi - axios parameter creator
 */
export const FinancialTransactionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create financial transaction
         * @param {CreateFinancialTransactionDto} createFinancialTransactionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFinancialTransaction: async (createFinancialTransactionDto: CreateFinancialTransactionDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createFinancialTransactionDto' is not null or undefined
            assertParamExists('createFinancialTransaction', 'createFinancialTransactionDto', createFinancialTransactionDto)
            const localVarPath = `/api/v1/master/financial-transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createFinancialTransactionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get financial transaction by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialTransactionById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getFinancialTransactionById', 'id', id)
            const localVarPath = `/api/v1/master/financial-transactions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List financial transactions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFinancialTransactions: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/master/financial-transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search financial transactions
         * @param {number} [transactionId] 
         * @param {number} [costCenterId] 
         * @param {SearchFinancialTransactionsTransactionTypeEnum} [transactionType] 
         * @param {SearchFinancialTransactionsReferenceTypeEnum} [referenceType] 
         * @param {string} [transactionDateFrom] 
         * @param {string} [transactionDateTo] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchFinancialTransactions: async (transactionId?: number, costCenterId?: number, transactionType?: SearchFinancialTransactionsTransactionTypeEnum, referenceType?: SearchFinancialTransactionsReferenceTypeEnum, transactionDateFrom?: string, transactionDateTo?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/master/financial-transactions/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (transactionId !== undefined) {
                localVarQueryParameter['transaction_id'] = transactionId;
            }

            if (costCenterId !== undefined) {
                localVarQueryParameter['cost_center_id'] = costCenterId;
            }

            if (transactionType !== undefined) {
                localVarQueryParameter['transaction_type'] = transactionType;
            }

            if (referenceType !== undefined) {
                localVarQueryParameter['reference_type'] = referenceType;
            }

            if (transactionDateFrom !== undefined) {
                localVarQueryParameter['transaction_date_from'] = (transactionDateFrom as any instanceof Date) ?
                    (transactionDateFrom as any).toISOString() :
                    transactionDateFrom;
            }

            if (transactionDateTo !== undefined) {
                localVarQueryParameter['transaction_date_to'] = (transactionDateTo as any instanceof Date) ?
                    (transactionDateTo as any).toISOString() :
                    transactionDateTo;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FinancialTransactionsApi - functional programming interface
 */
export const FinancialTransactionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FinancialTransactionsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create financial transaction
         * @param {CreateFinancialTransactionDto} createFinancialTransactionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFinancialTransaction(createFinancialTransactionDto: CreateFinancialTransactionDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createFinancialTransaction(createFinancialTransactionDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FinancialTransactionsApi.createFinancialTransaction']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get financial transaction by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFinancialTransactionById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFinancialTransactionById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FinancialTransactionsApi.getFinancialTransactionById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List financial transactions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFinancialTransactions(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFinancialTransactions(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FinancialTransactionsApi.listFinancialTransactions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Search financial transactions
         * @param {number} [transactionId] 
         * @param {number} [costCenterId] 
         * @param {SearchFinancialTransactionsTransactionTypeEnum} [transactionType] 
         * @param {SearchFinancialTransactionsReferenceTypeEnum} [referenceType] 
         * @param {string} [transactionDateFrom] 
         * @param {string} [transactionDateTo] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchFinancialTransactions(transactionId?: number, costCenterId?: number, transactionType?: SearchFinancialTransactionsTransactionTypeEnum, referenceType?: SearchFinancialTransactionsReferenceTypeEnum, transactionDateFrom?: string, transactionDateTo?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchFinancialTransactions(transactionId, costCenterId, transactionType, referenceType, transactionDateFrom, transactionDateTo, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FinancialTransactionsApi.searchFinancialTransactions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FinancialTransactionsApi - factory interface
 */
export const FinancialTransactionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FinancialTransactionsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create financial transaction
         * @param {CreateFinancialTransactionDto} createFinancialTransactionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFinancialTransaction(createFinancialTransactionDto: CreateFinancialTransactionDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createFinancialTransaction(createFinancialTransactionDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get financial transaction by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFinancialTransactionById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getFinancialTransactionById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List financial transactions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFinancialTransactions(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.listFinancialTransactions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search financial transactions
         * @param {number} [transactionId] 
         * @param {number} [costCenterId] 
         * @param {SearchFinancialTransactionsTransactionTypeEnum} [transactionType] 
         * @param {SearchFinancialTransactionsReferenceTypeEnum} [referenceType] 
         * @param {string} [transactionDateFrom] 
         * @param {string} [transactionDateTo] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchFinancialTransactions(transactionId?: number, costCenterId?: number, transactionType?: SearchFinancialTransactionsTransactionTypeEnum, referenceType?: SearchFinancialTransactionsReferenceTypeEnum, transactionDateFrom?: string, transactionDateTo?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.searchFinancialTransactions(transactionId, costCenterId, transactionType, referenceType, transactionDateFrom, transactionDateTo, page, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FinancialTransactionsApi - object-oriented interface
 */
export class FinancialTransactionsApi extends BaseAPI {
    /**
     * 
     * @summary Create financial transaction
     * @param {CreateFinancialTransactionDto} createFinancialTransactionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public createFinancialTransaction(createFinancialTransactionDto: CreateFinancialTransactionDto, options?: RawAxiosRequestConfig) {
        return FinancialTransactionsApiFp(this.configuration).createFinancialTransaction(createFinancialTransactionDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get financial transaction by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public getFinancialTransactionById(id: string, options?: RawAxiosRequestConfig) {
        return FinancialTransactionsApiFp(this.configuration).getFinancialTransactionById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List financial transactions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listFinancialTransactions(options?: RawAxiosRequestConfig) {
        return FinancialTransactionsApiFp(this.configuration).listFinancialTransactions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search financial transactions
     * @param {number} [transactionId] 
     * @param {number} [costCenterId] 
     * @param {SearchFinancialTransactionsTransactionTypeEnum} [transactionType] 
     * @param {SearchFinancialTransactionsReferenceTypeEnum} [referenceType] 
     * @param {string} [transactionDateFrom] 
     * @param {string} [transactionDateTo] 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public searchFinancialTransactions(transactionId?: number, costCenterId?: number, transactionType?: SearchFinancialTransactionsTransactionTypeEnum, referenceType?: SearchFinancialTransactionsReferenceTypeEnum, transactionDateFrom?: string, transactionDateTo?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return FinancialTransactionsApiFp(this.configuration).searchFinancialTransactions(transactionId, costCenterId, transactionType, referenceType, transactionDateFrom, transactionDateTo, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}

export const SearchFinancialTransactionsTransactionTypeEnum = {
    Income: 'income',
    Expense: 'expense'
} as const;
export type SearchFinancialTransactionsTransactionTypeEnum = typeof SearchFinancialTransactionsTransactionTypeEnum[keyof typeof SearchFinancialTransactionsTransactionTypeEnum];
export const SearchFinancialTransactionsReferenceTypeEnum = {
    Invoice: 'invoice',
    Bill: 'bill'
} as const;
export type SearchFinancialTransactionsReferenceTypeEnum = typeof SearchFinancialTransactionsReferenceTypeEnum[keyof typeof SearchFinancialTransactionsReferenceTypeEnum];


/**
 * HouseAWBsApi - axios parameter creator
 */
export const HouseAWBsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create house AWB
         * @param {CreateHouseAwbDto} createHouseAwbDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createHouseAwb: async (createHouseAwbDto: CreateHouseAwbDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createHouseAwbDto' is not null or undefined
            assertParamExists('createHouseAwb', 'createHouseAwbDto', createHouseAwbDto)
            const localVarPath = `/api/v1/master/house-awbs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createHouseAwbDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete house AWB
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHouseAwb: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteHouseAwb', 'id', id)
            const localVarPath = `/api/v1/master/house-awbs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get house AWB by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHouseAwbById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getHouseAwbById', 'id', id)
            const localVarPath = `/api/v1/master/house-awbs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List house AWBs
         * @param {string} [search] Search by house number
         * @param {number} [limit] Items per page (default: 10)
         * @param {number} [page] Page number (default: 1)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listHouseAwbs: async (search?: string, limit?: number, page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/master/house-awbs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search house AWBs
         * @param {string} [houseId] House AWB ID
         * @param {string} [houseNumber] House AWB number
         * @param {string} [jobId] Job ID
         * @param {string} [masterId] Master AWB ID
         * @param {string} [shipperId] Shipper ID
         * @param {string} [consigneeId] Consignee ID
         * @param {SearchHouseAwbsStatusEnum} [status] AWB status
         * @param {number} [page] Page number
         * @param {number} [pageSize] Items per page
         * @param {string} [sortBy] Sort by field
         * @param {SearchHouseAwbsSortDirEnum} [sortDir] Sort direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchHouseAwbs: async (houseId?: string, houseNumber?: string, jobId?: string, masterId?: string, shipperId?: string, consigneeId?: string, status?: SearchHouseAwbsStatusEnum, page?: number, pageSize?: number, sortBy?: string, sortDir?: SearchHouseAwbsSortDirEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/master/house-awbs/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (houseId !== undefined) {
                localVarQueryParameter['house_id'] = houseId;
            }

            if (houseNumber !== undefined) {
                localVarQueryParameter['house_number'] = houseNumber;
            }

            if (jobId !== undefined) {
                localVarQueryParameter['job_id'] = jobId;
            }

            if (masterId !== undefined) {
                localVarQueryParameter['master_id'] = masterId;
            }

            if (shipperId !== undefined) {
                localVarQueryParameter['shipper_id'] = shipperId;
            }

            if (consigneeId !== undefined) {
                localVarQueryParameter['consignee_id'] = consigneeId;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (sortDir !== undefined) {
                localVarQueryParameter['sort_dir'] = sortDir;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update house AWB
         * @param {string} id 
         * @param {CreateHouseAwbDto} createHouseAwbDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateHouseAwb: async (id: string, createHouseAwbDto: CreateHouseAwbDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateHouseAwb', 'id', id)
            // verify required parameter 'createHouseAwbDto' is not null or undefined
            assertParamExists('updateHouseAwb', 'createHouseAwbDto', createHouseAwbDto)
            const localVarPath = `/api/v1/master/house-awbs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createHouseAwbDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HouseAWBsApi - functional programming interface
 */
export const HouseAWBsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HouseAWBsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create house AWB
         * @param {CreateHouseAwbDto} createHouseAwbDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createHouseAwb(createHouseAwbDto: CreateHouseAwbDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createHouseAwb(createHouseAwbDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HouseAWBsApi.createHouseAwb']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete house AWB
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteHouseAwb(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteHouseAwb(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HouseAWBsApi.deleteHouseAwb']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get house AWB by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHouseAwbById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHouseAwbById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HouseAWBsApi.getHouseAwbById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List house AWBs
         * @param {string} [search] Search by house number
         * @param {number} [limit] Items per page (default: 10)
         * @param {number} [page] Page number (default: 1)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listHouseAwbs(search?: string, limit?: number, page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listHouseAwbs(search, limit, page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HouseAWBsApi.listHouseAwbs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Search house AWBs
         * @param {string} [houseId] House AWB ID
         * @param {string} [houseNumber] House AWB number
         * @param {string} [jobId] Job ID
         * @param {string} [masterId] Master AWB ID
         * @param {string} [shipperId] Shipper ID
         * @param {string} [consigneeId] Consignee ID
         * @param {SearchHouseAwbsStatusEnum} [status] AWB status
         * @param {number} [page] Page number
         * @param {number} [pageSize] Items per page
         * @param {string} [sortBy] Sort by field
         * @param {SearchHouseAwbsSortDirEnum} [sortDir] Sort direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchHouseAwbs(houseId?: string, houseNumber?: string, jobId?: string, masterId?: string, shipperId?: string, consigneeId?: string, status?: SearchHouseAwbsStatusEnum, page?: number, pageSize?: number, sortBy?: string, sortDir?: SearchHouseAwbsSortDirEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchHouseAwbs(houseId, houseNumber, jobId, masterId, shipperId, consigneeId, status, page, pageSize, sortBy, sortDir, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HouseAWBsApi.searchHouseAwbs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update house AWB
         * @param {string} id 
         * @param {CreateHouseAwbDto} createHouseAwbDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateHouseAwb(id: string, createHouseAwbDto: CreateHouseAwbDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateHouseAwb(id, createHouseAwbDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HouseAWBsApi.updateHouseAwb']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HouseAWBsApi - factory interface
 */
export const HouseAWBsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HouseAWBsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create house AWB
         * @param {CreateHouseAwbDto} createHouseAwbDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createHouseAwb(createHouseAwbDto: CreateHouseAwbDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createHouseAwb(createHouseAwbDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete house AWB
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHouseAwb(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteHouseAwb(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get house AWB by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHouseAwbById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getHouseAwbById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List house AWBs
         * @param {string} [search] Search by house number
         * @param {number} [limit] Items per page (default: 10)
         * @param {number} [page] Page number (default: 1)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listHouseAwbs(search?: string, limit?: number, page?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.listHouseAwbs(search, limit, page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search house AWBs
         * @param {string} [houseId] House AWB ID
         * @param {string} [houseNumber] House AWB number
         * @param {string} [jobId] Job ID
         * @param {string} [masterId] Master AWB ID
         * @param {string} [shipperId] Shipper ID
         * @param {string} [consigneeId] Consignee ID
         * @param {SearchHouseAwbsStatusEnum} [status] AWB status
         * @param {number} [page] Page number
         * @param {number} [pageSize] Items per page
         * @param {string} [sortBy] Sort by field
         * @param {SearchHouseAwbsSortDirEnum} [sortDir] Sort direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchHouseAwbs(houseId?: string, houseNumber?: string, jobId?: string, masterId?: string, shipperId?: string, consigneeId?: string, status?: SearchHouseAwbsStatusEnum, page?: number, pageSize?: number, sortBy?: string, sortDir?: SearchHouseAwbsSortDirEnum, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.searchHouseAwbs(houseId, houseNumber, jobId, masterId, shipperId, consigneeId, status, page, pageSize, sortBy, sortDir, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update house AWB
         * @param {string} id 
         * @param {CreateHouseAwbDto} createHouseAwbDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateHouseAwb(id: string, createHouseAwbDto: CreateHouseAwbDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateHouseAwb(id, createHouseAwbDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HouseAWBsApi - object-oriented interface
 */
export class HouseAWBsApi extends BaseAPI {
    /**
     * 
     * @summary Create house AWB
     * @param {CreateHouseAwbDto} createHouseAwbDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public createHouseAwb(createHouseAwbDto: CreateHouseAwbDto, options?: RawAxiosRequestConfig) {
        return HouseAWBsApiFp(this.configuration).createHouseAwb(createHouseAwbDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete house AWB
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public deleteHouseAwb(id: string, options?: RawAxiosRequestConfig) {
        return HouseAWBsApiFp(this.configuration).deleteHouseAwb(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get house AWB by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public getHouseAwbById(id: string, options?: RawAxiosRequestConfig) {
        return HouseAWBsApiFp(this.configuration).getHouseAwbById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List house AWBs
     * @param {string} [search] Search by house number
     * @param {number} [limit] Items per page (default: 10)
     * @param {number} [page] Page number (default: 1)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listHouseAwbs(search?: string, limit?: number, page?: number, options?: RawAxiosRequestConfig) {
        return HouseAWBsApiFp(this.configuration).listHouseAwbs(search, limit, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search house AWBs
     * @param {string} [houseId] House AWB ID
     * @param {string} [houseNumber] House AWB number
     * @param {string} [jobId] Job ID
     * @param {string} [masterId] Master AWB ID
     * @param {string} [shipperId] Shipper ID
     * @param {string} [consigneeId] Consignee ID
     * @param {SearchHouseAwbsStatusEnum} [status] AWB status
     * @param {number} [page] Page number
     * @param {number} [pageSize] Items per page
     * @param {string} [sortBy] Sort by field
     * @param {SearchHouseAwbsSortDirEnum} [sortDir] Sort direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public searchHouseAwbs(houseId?: string, houseNumber?: string, jobId?: string, masterId?: string, shipperId?: string, consigneeId?: string, status?: SearchHouseAwbsStatusEnum, page?: number, pageSize?: number, sortBy?: string, sortDir?: SearchHouseAwbsSortDirEnum, options?: RawAxiosRequestConfig) {
        return HouseAWBsApiFp(this.configuration).searchHouseAwbs(houseId, houseNumber, jobId, masterId, shipperId, consigneeId, status, page, pageSize, sortBy, sortDir, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update house AWB
     * @param {string} id 
     * @param {CreateHouseAwbDto} createHouseAwbDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public updateHouseAwb(id: string, createHouseAwbDto: CreateHouseAwbDto, options?: RawAxiosRequestConfig) {
        return HouseAWBsApiFp(this.configuration).updateHouseAwb(id, createHouseAwbDto, options).then((request) => request(this.axios, this.basePath));
    }
}

export const SearchHouseAwbsStatusEnum = {
    Draft: 'draft',
    Issued: 'issued',
    Cancelled: 'cancelled'
} as const;
export type SearchHouseAwbsStatusEnum = typeof SearchHouseAwbsStatusEnum[keyof typeof SearchHouseAwbsStatusEnum];
export const SearchHouseAwbsSortDirEnum = {
    Asc: 'ASC',
    Desc: 'DESC'
} as const;
export type SearchHouseAwbsSortDirEnum = typeof SearchHouseAwbsSortDirEnum[keyof typeof SearchHouseAwbsSortDirEnum];


/**
 * ItemsApi - axios parameter creator
 */
export const ItemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create item
         * @param {CreateItemDto} createItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createItem: async (createItemDto: CreateItemDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createItemDto' is not null or undefined
            assertParamExists('createItem', 'createItemDto', createItemDto)
            const localVarPath = `/api/v1/master/items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createItemDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get item by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getItemById', 'id', id)
            const localVarPath = `/api/v1/master/items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listItems: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/master/items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search items
         * @param {number} [itemId] 
         * @param {number} [houseAwbId] 
         * @param {number} [masterAwbId] 
         * @param {string} [description] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchItems: async (itemId?: number, houseAwbId?: number, masterAwbId?: number, description?: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/master/items/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (itemId !== undefined) {
                localVarQueryParameter['item_id'] = itemId;
            }

            if (houseAwbId !== undefined) {
                localVarQueryParameter['house_awb_id'] = houseAwbId;
            }

            if (masterAwbId !== undefined) {
                localVarQueryParameter['master_awb_id'] = masterAwbId;
            }

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update item
         * @param {string} id 
         * @param {UpdateItemDto} updateItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItem: async (id: string, updateItemDto: UpdateItemDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateItem', 'id', id)
            // verify required parameter 'updateItemDto' is not null or undefined
            assertParamExists('updateItem', 'updateItemDto', updateItemDto)
            const localVarPath = `/api/v1/master/items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateItemDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ItemsApi - functional programming interface
 */
export const ItemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ItemsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create item
         * @param {CreateItemDto} createItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createItem(createItemDto: CreateItemDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createItem(createItemDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ItemsApi.createItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get item by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItemById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ItemsApi.getItemById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listItems(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listItems(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ItemsApi.listItems']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Search items
         * @param {number} [itemId] 
         * @param {number} [houseAwbId] 
         * @param {number} [masterAwbId] 
         * @param {string} [description] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchItems(itemId?: number, houseAwbId?: number, masterAwbId?: number, description?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchItems(itemId, houseAwbId, masterAwbId, description, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ItemsApi.searchItems']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update item
         * @param {string} id 
         * @param {UpdateItemDto} updateItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateItem(id: string, updateItemDto: UpdateItemDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateItem(id, updateItemDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ItemsApi.updateItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ItemsApi - factory interface
 */
export const ItemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ItemsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create item
         * @param {CreateItemDto} createItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createItem(createItemDto: CreateItemDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createItem(createItemDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get item by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getItemById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listItems(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.listItems(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search items
         * @param {number} [itemId] 
         * @param {number} [houseAwbId] 
         * @param {number} [masterAwbId] 
         * @param {string} [description] 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchItems(itemId?: number, houseAwbId?: number, masterAwbId?: number, description?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.searchItems(itemId, houseAwbId, masterAwbId, description, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update item
         * @param {string} id 
         * @param {UpdateItemDto} updateItemDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItem(id: string, updateItemDto: UpdateItemDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateItem(id, updateItemDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ItemsApi - object-oriented interface
 */
export class ItemsApi extends BaseAPI {
    /**
     * 
     * @summary Create item
     * @param {CreateItemDto} createItemDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public createItem(createItemDto: CreateItemDto, options?: RawAxiosRequestConfig) {
        return ItemsApiFp(this.configuration).createItem(createItemDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get item by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public getItemById(id: string, options?: RawAxiosRequestConfig) {
        return ItemsApiFp(this.configuration).getItemById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List items
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listItems(options?: RawAxiosRequestConfig) {
        return ItemsApiFp(this.configuration).listItems(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search items
     * @param {number} [itemId] 
     * @param {number} [houseAwbId] 
     * @param {number} [masterAwbId] 
     * @param {string} [description] 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public searchItems(itemId?: number, houseAwbId?: number, masterAwbId?: number, description?: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return ItemsApiFp(this.configuration).searchItems(itemId, houseAwbId, masterAwbId, description, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update item
     * @param {string} id 
     * @param {UpdateItemDto} updateItemDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public updateItem(id: string, updateItemDto: UpdateItemDto, options?: RawAxiosRequestConfig) {
        return ItemsApiFp(this.configuration).updateItem(id, updateItemDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * JobsApi - axios parameter creator
 */
export const JobsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create job
         * @param {CreateJobDto} createJobDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createJob: async (createJobDto: CreateJobDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createJobDto' is not null or undefined
            assertParamExists('createJob', 'createJobDto', createJobDto)
            const localVarPath = `/api/v1/master/jobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createJobDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get job by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getJobById', 'id', id)
            const localVarPath = `/api/v1/master/jobs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List jobs
         * @param {string} [search] Search by job number
         * @param {number} [limit] Items per page (default: 10)
         * @param {number} [page] Page number (default: 1)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listJobs: async (search?: string, limit?: number, page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/master/jobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search jobs
         * @param {SearchJobsJobNumberMatchEnum} [jobNumberMatch] 
         * @param {string} [jobNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchJobs: async (jobNumberMatch?: SearchJobsJobNumberMatchEnum, jobNumber?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/master/jobs/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (jobNumberMatch !== undefined) {
                localVarQueryParameter['job_number_match'] = jobNumberMatch;
            }

            if (jobNumber !== undefined) {
                localVarQueryParameter['job_number'] = jobNumber;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JobsApi - functional programming interface
 */
export const JobsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JobsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create job
         * @param {CreateJobDto} createJobDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createJob(createJobDto: CreateJobDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createJob(createJobDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobsApi.createJob']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get job by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJobById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getJobById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobsApi.getJobById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List jobs
         * @param {string} [search] Search by job number
         * @param {number} [limit] Items per page (default: 10)
         * @param {number} [page] Page number (default: 1)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listJobs(search?: string, limit?: number, page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listJobs(search, limit, page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobsApi.listJobs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Search jobs
         * @param {SearchJobsJobNumberMatchEnum} [jobNumberMatch] 
         * @param {string} [jobNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchJobs(jobNumberMatch?: SearchJobsJobNumberMatchEnum, jobNumber?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchJobs(jobNumberMatch, jobNumber, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['JobsApi.searchJobs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * JobsApi - factory interface
 */
export const JobsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JobsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create job
         * @param {CreateJobDto} createJobDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createJob(createJobDto: CreateJobDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createJob(createJobDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get job by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getJobById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List jobs
         * @param {string} [search] Search by job number
         * @param {number} [limit] Items per page (default: 10)
         * @param {number} [page] Page number (default: 1)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listJobs(search?: string, limit?: number, page?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.listJobs(search, limit, page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search jobs
         * @param {SearchJobsJobNumberMatchEnum} [jobNumberMatch] 
         * @param {string} [jobNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchJobs(jobNumberMatch?: SearchJobsJobNumberMatchEnum, jobNumber?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.searchJobs(jobNumberMatch, jobNumber, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JobsApi - object-oriented interface
 */
export class JobsApi extends BaseAPI {
    /**
     * 
     * @summary Create job
     * @param {CreateJobDto} createJobDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public createJob(createJobDto: CreateJobDto, options?: RawAxiosRequestConfig) {
        return JobsApiFp(this.configuration).createJob(createJobDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get job by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public getJobById(id: string, options?: RawAxiosRequestConfig) {
        return JobsApiFp(this.configuration).getJobById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List jobs
     * @param {string} [search] Search by job number
     * @param {number} [limit] Items per page (default: 10)
     * @param {number} [page] Page number (default: 1)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listJobs(search?: string, limit?: number, page?: number, options?: RawAxiosRequestConfig) {
        return JobsApiFp(this.configuration).listJobs(search, limit, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search jobs
     * @param {SearchJobsJobNumberMatchEnum} [jobNumberMatch] 
     * @param {string} [jobNumber] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public searchJobs(jobNumberMatch?: SearchJobsJobNumberMatchEnum, jobNumber?: string, options?: RawAxiosRequestConfig) {
        return JobsApiFp(this.configuration).searchJobs(jobNumberMatch, jobNumber, options).then((request) => request(this.axios, this.basePath));
    }
}

export const SearchJobsJobNumberMatchEnum = {
    Exact: 'exact',
    Contains: 'contains',
    StartsWith: 'startsWith'
} as const;
export type SearchJobsJobNumberMatchEnum = typeof SearchJobsJobNumberMatchEnum[keyof typeof SearchJobsJobNumberMatchEnum];


/**
 * MasterAWBsApi - axios parameter creator
 */
export const MasterAWBsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create master AWB
         * @param {CreateMasterAwbDto} createMasterAwbDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMasterAwb: async (createMasterAwbDto: CreateMasterAwbDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createMasterAwbDto' is not null or undefined
            assertParamExists('createMasterAwb', 'createMasterAwbDto', createMasterAwbDto)
            const localVarPath = `/api/v1/master/master-awbs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createMasterAwbDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete master AWB
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMasterAwb: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteMasterAwb', 'id', id)
            const localVarPath = `/api/v1/master/master-awbs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get master AWB by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMasterAwbById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getMasterAwbById', 'id', id)
            const localVarPath = `/api/v1/master/master-awbs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List master AWBs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMasterAwbs: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/master/master-awbs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search master AWBs
         * @param {number} [jobId] 
         * @param {number} [masterId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMasterAwbs: async (jobId?: number, masterId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/master/master-awbs/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (jobId !== undefined) {
                localVarQueryParameter['job_id'] = jobId;
            }

            if (masterId !== undefined) {
                localVarQueryParameter['master_id'] = masterId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update master AWB
         * @param {string} id 
         * @param {CreateMasterAwbDto} createMasterAwbDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMasterAwb: async (id: string, createMasterAwbDto: CreateMasterAwbDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateMasterAwb', 'id', id)
            // verify required parameter 'createMasterAwbDto' is not null or undefined
            assertParamExists('updateMasterAwb', 'createMasterAwbDto', createMasterAwbDto)
            const localVarPath = `/api/v1/master/master-awbs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createMasterAwbDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MasterAWBsApi - functional programming interface
 */
export const MasterAWBsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MasterAWBsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create master AWB
         * @param {CreateMasterAwbDto} createMasterAwbDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMasterAwb(createMasterAwbDto: CreateMasterAwbDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMasterAwb(createMasterAwbDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MasterAWBsApi.createMasterAwb']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete master AWB
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMasterAwb(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMasterAwb(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MasterAWBsApi.deleteMasterAwb']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get master AWB by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMasterAwbById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMasterAwbById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MasterAWBsApi.getMasterAwbById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List master AWBs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMasterAwbs(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMasterAwbs(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MasterAWBsApi.listMasterAwbs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Search master AWBs
         * @param {number} [jobId] 
         * @param {number} [masterId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchMasterAwbs(jobId?: number, masterId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchMasterAwbs(jobId, masterId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MasterAWBsApi.searchMasterAwbs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update master AWB
         * @param {string} id 
         * @param {CreateMasterAwbDto} createMasterAwbDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMasterAwb(id: string, createMasterAwbDto: CreateMasterAwbDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMasterAwb(id, createMasterAwbDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MasterAWBsApi.updateMasterAwb']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MasterAWBsApi - factory interface
 */
export const MasterAWBsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MasterAWBsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create master AWB
         * @param {CreateMasterAwbDto} createMasterAwbDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMasterAwb(createMasterAwbDto: CreateMasterAwbDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createMasterAwb(createMasterAwbDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete master AWB
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMasterAwb(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteMasterAwb(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get master AWB by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMasterAwbById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getMasterAwbById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List master AWBs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMasterAwbs(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.listMasterAwbs(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search master AWBs
         * @param {number} [jobId] 
         * @param {number} [masterId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMasterAwbs(jobId?: number, masterId?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.searchMasterAwbs(jobId, masterId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update master AWB
         * @param {string} id 
         * @param {CreateMasterAwbDto} createMasterAwbDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMasterAwb(id: string, createMasterAwbDto: CreateMasterAwbDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateMasterAwb(id, createMasterAwbDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MasterAWBsApi - object-oriented interface
 */
export class MasterAWBsApi extends BaseAPI {
    /**
     * 
     * @summary Create master AWB
     * @param {CreateMasterAwbDto} createMasterAwbDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public createMasterAwb(createMasterAwbDto: CreateMasterAwbDto, options?: RawAxiosRequestConfig) {
        return MasterAWBsApiFp(this.configuration).createMasterAwb(createMasterAwbDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete master AWB
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public deleteMasterAwb(id: string, options?: RawAxiosRequestConfig) {
        return MasterAWBsApiFp(this.configuration).deleteMasterAwb(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get master AWB by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public getMasterAwbById(id: string, options?: RawAxiosRequestConfig) {
        return MasterAWBsApiFp(this.configuration).getMasterAwbById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List master AWBs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listMasterAwbs(options?: RawAxiosRequestConfig) {
        return MasterAWBsApiFp(this.configuration).listMasterAwbs(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search master AWBs
     * @param {number} [jobId] 
     * @param {number} [masterId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public searchMasterAwbs(jobId?: number, masterId?: number, options?: RawAxiosRequestConfig) {
        return MasterAWBsApiFp(this.configuration).searchMasterAwbs(jobId, masterId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update master AWB
     * @param {string} id 
     * @param {CreateMasterAwbDto} createMasterAwbDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public updateMasterAwb(id: string, createMasterAwbDto: CreateMasterAwbDto, options?: RawAxiosRequestConfig) {
        return MasterAWBsApiFp(this.configuration).updateMasterAwb(id, createMasterAwbDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PartiesApi - axios parameter creator
 */
export const PartiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create party
         * @param {CreatePartyDto} createPartyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createParty: async (createPartyDto: CreatePartyDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPartyDto' is not null or undefined
            assertParamExists('createParty', 'createPartyDto', createPartyDto)
            const localVarPath = `/api/v1/master/parties`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPartyDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete party
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteParty: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteParty', 'id', id)
            const localVarPath = `/api/v1/master/parties/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get party by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPartyById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPartyById', 'id', id)
            const localVarPath = `/api/v1/master/parties/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List parties
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listParties: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/master/parties`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search parties
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchParties: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/master/parties/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update party
         * @param {string} id 
         * @param {CreatePartyDto} createPartyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateParty: async (id: string, createPartyDto: CreatePartyDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateParty', 'id', id)
            // verify required parameter 'createPartyDto' is not null or undefined
            assertParamExists('updateParty', 'createPartyDto', createPartyDto)
            const localVarPath = `/api/v1/master/parties/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPartyDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PartiesApi - functional programming interface
 */
export const PartiesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PartiesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create party
         * @param {CreatePartyDto} createPartyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createParty(createPartyDto: CreatePartyDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createParty(createPartyDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PartiesApi.createParty']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete party
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteParty(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteParty(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PartiesApi.deleteParty']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get party by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPartyById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPartyById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PartiesApi.getPartyById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List parties
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listParties(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listParties(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PartiesApi.listParties']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Search parties
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchParties(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchParties(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PartiesApi.searchParties']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update party
         * @param {string} id 
         * @param {CreatePartyDto} createPartyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateParty(id: string, createPartyDto: CreatePartyDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateParty(id, createPartyDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PartiesApi.updateParty']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PartiesApi - factory interface
 */
export const PartiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PartiesApiFp(configuration)
    return {
        /**
         * 
         * @summary Create party
         * @param {CreatePartyDto} createPartyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createParty(createPartyDto: CreatePartyDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createParty(createPartyDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete party
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteParty(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteParty(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get party by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPartyById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getPartyById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List parties
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listParties(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.listParties(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search parties
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchParties(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.searchParties(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update party
         * @param {string} id 
         * @param {CreatePartyDto} createPartyDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateParty(id: string, createPartyDto: CreatePartyDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateParty(id, createPartyDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PartiesApi - object-oriented interface
 */
export class PartiesApi extends BaseAPI {
    /**
     * 
     * @summary Create party
     * @param {CreatePartyDto} createPartyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public createParty(createPartyDto: CreatePartyDto, options?: RawAxiosRequestConfig) {
        return PartiesApiFp(this.configuration).createParty(createPartyDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete party
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public deleteParty(id: string, options?: RawAxiosRequestConfig) {
        return PartiesApiFp(this.configuration).deleteParty(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get party by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public getPartyById(id: string, options?: RawAxiosRequestConfig) {
        return PartiesApiFp(this.configuration).getPartyById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List parties
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listParties(options?: RawAxiosRequestConfig) {
        return PartiesApiFp(this.configuration).listParties(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search parties
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public searchParties(options?: RawAxiosRequestConfig) {
        return PartiesApiFp(this.configuration).searchParties(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update party
     * @param {string} id 
     * @param {CreatePartyDto} createPartyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public updateParty(id: string, createPartyDto: CreatePartyDto, options?: RawAxiosRequestConfig) {
        return PartiesApiFp(this.configuration).updateParty(id, createPartyDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PortsAirportsApi - axios parameter creator
 */
export const PortsAirportsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create port/airport
         * @param {CreatePortAirportDto} createPortAirportDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPortAirport: async (createPortAirportDto: CreatePortAirportDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPortAirportDto' is not null or undefined
            assertParamExists('createPortAirport', 'createPortAirportDto', createPortAirportDto)
            const localVarPath = `/api/v1/master/ports-airports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPortAirportDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete port/airport
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePortAirport: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePortAirport', 'id', id)
            const localVarPath = `/api/v1/master/ports-airports/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get port/airport by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPortAirportById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPortAirportById', 'id', id)
            const localVarPath = `/api/v1/master/ports-airports/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List ports/airports
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPortsAirports: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/master/ports-airports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search ports/airports
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchPortsAirports: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/master/ports-airports/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update port/airport
         * @param {string} id 
         * @param {CreatePortAirportDto} createPortAirportDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePortAirport: async (id: string, createPortAirportDto: CreatePortAirportDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updatePortAirport', 'id', id)
            // verify required parameter 'createPortAirportDto' is not null or undefined
            assertParamExists('updatePortAirport', 'createPortAirportDto', createPortAirportDto)
            const localVarPath = `/api/v1/master/ports-airports/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPortAirportDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PortsAirportsApi - functional programming interface
 */
export const PortsAirportsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PortsAirportsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create port/airport
         * @param {CreatePortAirportDto} createPortAirportDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPortAirport(createPortAirportDto: CreatePortAirportDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPortAirport(createPortAirportDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PortsAirportsApi.createPortAirport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete port/airport
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePortAirport(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePortAirport(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PortsAirportsApi.deletePortAirport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get port/airport by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPortAirportById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPortAirportById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PortsAirportsApi.getPortAirportById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List ports/airports
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPortsAirports(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPortsAirports(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PortsAirportsApi.listPortsAirports']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Search ports/airports
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchPortsAirports(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchPortsAirports(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PortsAirportsApi.searchPortsAirports']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update port/airport
         * @param {string} id 
         * @param {CreatePortAirportDto} createPortAirportDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePortAirport(id: string, createPortAirportDto: CreatePortAirportDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePortAirport(id, createPortAirportDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PortsAirportsApi.updatePortAirport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PortsAirportsApi - factory interface
 */
export const PortsAirportsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PortsAirportsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create port/airport
         * @param {CreatePortAirportDto} createPortAirportDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPortAirport(createPortAirportDto: CreatePortAirportDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createPortAirport(createPortAirportDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete port/airport
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePortAirport(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePortAirport(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get port/airport by id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPortAirportById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getPortAirportById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List ports/airports
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPortsAirports(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.listPortsAirports(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search ports/airports
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchPortsAirports(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.searchPortsAirports(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update port/airport
         * @param {string} id 
         * @param {CreatePortAirportDto} createPortAirportDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePortAirport(id: string, createPortAirportDto: CreatePortAirportDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updatePortAirport(id, createPortAirportDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PortsAirportsApi - object-oriented interface
 */
export class PortsAirportsApi extends BaseAPI {
    /**
     * 
     * @summary Create port/airport
     * @param {CreatePortAirportDto} createPortAirportDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public createPortAirport(createPortAirportDto: CreatePortAirportDto, options?: RawAxiosRequestConfig) {
        return PortsAirportsApiFp(this.configuration).createPortAirport(createPortAirportDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete port/airport
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public deletePortAirport(id: string, options?: RawAxiosRequestConfig) {
        return PortsAirportsApiFp(this.configuration).deletePortAirport(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get port/airport by id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public getPortAirportById(id: string, options?: RawAxiosRequestConfig) {
        return PortsAirportsApiFp(this.configuration).getPortAirportById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List ports/airports
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public listPortsAirports(options?: RawAxiosRequestConfig) {
        return PortsAirportsApiFp(this.configuration).listPortsAirports(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search ports/airports
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public searchPortsAirports(options?: RawAxiosRequestConfig) {
        return PortsAirportsApiFp(this.configuration).searchPortsAirports(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update port/airport
     * @param {string} id 
     * @param {CreatePortAirportDto} createPortAirportDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public updatePortAirport(id: string, createPortAirportDto: CreatePortAirportDto, options?: RawAxiosRequestConfig) {
        return PortsAirportsApiFp(this.configuration).updatePortAirport(id, createPortAirportDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersApi - axios parameter creator
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Change password for current authenticated user
         * @summary Change my password
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerChangeMyPassword: async (body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('usersControllerChangeMyPassword', 'body', body)
            const localVarPath = `/api/v1/users/profile/change-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT-auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Change password for a specific user (Admin only)
         * @summary Change user password
         * @param {string} id User UUID
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerChangePassword: async (id: string, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersControllerChangePassword', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('usersControllerChangePassword', 'body', body)
            const localVarPath = `/api/v1/users/{id}/change-password`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT-auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new user account (Admin only)
         * @summary Create a new user
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerCreate: async (body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('usersControllerCreate', 'body', body)
            const localVarPath = `/api/v1/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT-auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a paginated list of all users (Admin/Manager only)
         * @summary Get all users
         * @param {string} [search] Search by email
         * @param {number} [limit] Items per page (default: 10)
         * @param {number} [page] Page number (default: 1)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFindAll: async (search?: string, limit?: number, page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT-auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a specific user by their ID (Admin/Manager only)
         * @summary Get user by ID
         * @param {string} id User UUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersControllerFindOne', 'id', id)
            const localVarPath = `/api/v1/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT-auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get current authenticated user profile
         * @summary Get my profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetMyProfile: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/users/profile/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT-auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a user account (Admin only)
         * @summary Delete user
         * @param {string} id User UUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerRemove: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersControllerRemove', 'id', id)
            const localVarPath = `/api/v1/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT-auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update user information (Admin only)
         * @summary Update user
         * @param {string} id User UUID
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUpdate: async (id: string, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersControllerUpdate', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('usersControllerUpdate', 'body', body)
            const localVarPath = `/api/v1/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT-auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update current authenticated user profile (role and status cannot be changed)
         * @summary Update my profile
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUpdateMyProfile: async (body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('usersControllerUpdateMyProfile', 'body', body)
            const localVarPath = `/api/v1/users/profile/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT-auth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * Change password for current authenticated user
         * @summary Change my password
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerChangeMyPassword(body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerChangeMyPassword(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersControllerChangeMyPassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Change password for a specific user (Admin only)
         * @summary Change user password
         * @param {string} id User UUID
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerChangePassword(id: string, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerChangePassword(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersControllerChangePassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new user account (Admin only)
         * @summary Create a new user
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerCreate(body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerCreate(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a paginated list of all users (Admin/Manager only)
         * @summary Get all users
         * @param {string} [search] Search by email
         * @param {number} [limit] Items per page (default: 10)
         * @param {number} [page] Page number (default: 1)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerFindAll(search?: string, limit?: number, page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerFindAll(search, limit, page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a specific user by their ID (Admin/Manager only)
         * @summary Get user by ID
         * @param {string} id User UUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get current authenticated user profile
         * @summary Get my profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerGetMyProfile(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerGetMyProfile(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersControllerGetMyProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a user account (Admin only)
         * @summary Delete user
         * @param {string} id User UUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update user information (Admin only)
         * @summary Update user
         * @param {string} id User UUID
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerUpdate(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update current authenticated user profile (role and status cannot be changed)
         * @summary Update my profile
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerUpdateMyProfile(body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerUpdateMyProfile(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersControllerUpdateMyProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * Change password for current authenticated user
         * @summary Change my password
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerChangeMyPassword(body: object, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.usersControllerChangeMyPassword(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Change password for a specific user (Admin only)
         * @summary Change user password
         * @param {string} id User UUID
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerChangePassword(id: string, body: object, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.usersControllerChangePassword(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new user account (Admin only)
         * @summary Create a new user
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerCreate(body: object, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.usersControllerCreate(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a paginated list of all users (Admin/Manager only)
         * @summary Get all users
         * @param {string} [search] Search by email
         * @param {number} [limit] Items per page (default: 10)
         * @param {number} [page] Page number (default: 1)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFindAll(search?: string, limit?: number, page?: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.usersControllerFindAll(search, limit, page, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a specific user by their ID (Admin/Manager only)
         * @summary Get user by ID
         * @param {string} id User UUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.usersControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get current authenticated user profile
         * @summary Get my profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetMyProfile(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.usersControllerGetMyProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a user account (Admin only)
         * @summary Delete user
         * @param {string} id User UUID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerRemove(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.usersControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update user information (Admin only)
         * @summary Update user
         * @param {string} id User UUID
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.usersControllerUpdate(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Update current authenticated user profile (role and status cannot be changed)
         * @summary Update my profile
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUpdateMyProfile(body: object, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.usersControllerUpdateMyProfile(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 */
export class UsersApi extends BaseAPI {
    /**
     * Change password for current authenticated user
     * @summary Change my password
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public usersControllerChangeMyPassword(body: object, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerChangeMyPassword(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Change password for a specific user (Admin only)
     * @summary Change user password
     * @param {string} id User UUID
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public usersControllerChangePassword(id: string, body: object, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerChangePassword(id, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new user account (Admin only)
     * @summary Create a new user
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public usersControllerCreate(body: object, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerCreate(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a paginated list of all users (Admin/Manager only)
     * @summary Get all users
     * @param {string} [search] Search by email
     * @param {number} [limit] Items per page (default: 10)
     * @param {number} [page] Page number (default: 1)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public usersControllerFindAll(search?: string, limit?: number, page?: number, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerFindAll(search, limit, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a specific user by their ID (Admin/Manager only)
     * @summary Get user by ID
     * @param {string} id User UUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public usersControllerFindOne(id: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get current authenticated user profile
     * @summary Get my profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public usersControllerGetMyProfile(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerGetMyProfile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a user account (Admin only)
     * @summary Delete user
     * @param {string} id User UUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public usersControllerRemove(id: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update user information (Admin only)
     * @summary Update user
     * @param {string} id User UUID
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public usersControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerUpdate(id, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update current authenticated user profile (role and status cannot be changed)
     * @summary Update my profile
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public usersControllerUpdateMyProfile(body: object, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerUpdateMyProfile(body, options).then((request) => request(this.axios, this.basePath));
    }
}



